import json
import boto3
import time
import random

def lambda_handler(event, context):
    s = event['s']
    r = int(event['r'])
    h = int(event['h'])
    d = int(event['d'])
    t = event['t']
    p = int(event['p'])
    data = event['data']
    
    minhistory = h
    shots = d
    result = {"var95": [], "var99": [], "Open": [], "Close": [], "Date": []}
    
    for i in range(minhistory, len(data)):
        if data[i]['Buy'] == 1:  # if we’re interested in Buy signals
            mean = data[i]['Close'] - data[i - minhistory]['Close']
            std = data[i]['Close'] - data[i - minhistory]['Close']
            # generate much larger random number series with same broad characteristics
            simulated = [random.gauss(mean, std) for _ in range(shots)]
            # sort and pick 95% and 99%  - not distinguishing long/short risks here
            simulated.sort(reverse=True)
            var95 = simulated[int(len(simulated) * 0.95)]
            var99 = simulated[int(len(simulated) * 0.99)]
    
            result["var95"].append(var95)
            result["var99"].append(var99)
            result["Open"].append(data[i]['Open'])
            result["Close"].append(data[i]['Close'])
            result["Date"].append(data[i]['Date'])
            
        if data[i]['Sell'] == 1:  # if we’re interested in Sell signals
            mean = data[i]['Close'] - data[i - minhistory]['Close']
            std = data[i]['Close'] - data[i - minhistory]['Close']
   
            simulated = [random.gauss(mean, std) for _ in range(shots)]

            simulated.sort(reverse=True)
            var95 = simulated[int(len(simulated) * 0.95)]
            var99 = simulated[int(len(simulated) * 0.99)]
    
            result["var95"].append(var95)
            result["var99"].append(var99)
            result["Open"].append(data[i]['Open'])
            result["Close"].append(data[i]['Close'])
            result["Date"].append(data[i]['Date'])
    
    return result
